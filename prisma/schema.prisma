// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id   String @id @default(uuid())
  name String @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  User      User[]

  @@map("roles")
}

model User {
  id    String  @id @default(uuid())
  email String  @unique
  name  String?

  roleId String @map("role_id")
  role   Role   @relation(fields: [roleId], references: [id])

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  RefreshToken RefreshToken[]

  @@map("users")
}

model Permission {
  id   String @id @default(uuid())
  name String @unique

  description String?
  screen      String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("permissions")
}

model OTP {
  id     String  @id @default(uuid())
  email  String  @unique
  code   String
  isUsed Boolean @default(false)

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("otps")
}

model RefreshToken {
  id     String @id @default(uuid())
  token  String @unique
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  isRevoked Boolean  @default(false) @map("is_revoked")
  expiresAt DateTime @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("refresh_tokens")
}
